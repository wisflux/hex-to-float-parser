import struct

# hexcode
hex = "01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15 01 03 00 65 00 02 D4 14 01 03 00 67 00 02 75 D4 01 03 00 6B 00 02 B5 D7 01 03 00 6D 00 02 55 D6 01 03 00 6F 00 02 F4 16 01 03 00 71 00 02 94 10 01 03 00 73 00 02 35 D0 01 03 00 75 00 02 D5 D1 01 03 00 DF 00 02 F5 F1 01 03 01 4D 00 02 55 E0 01 03 00 AB 00 02 B5 EB 01 03 00 8B 00 02 B4 21 01 03 00 63 00 02 34 15"
hexWithoutSpaces = hex.replace(' ', '')

# stride of 2 digits
n = 8
totalCharacters = len(hexWithoutSpaces)

# Taking 2 digits at a time
for i in range(0, totalCharacters):
    if totalCharacters - i < n:
        break

    stride = hexWithoutSpaces[i:i+n]

    # convert hex to decimal
    parsedFloat = struct.unpack('!f', bytes.fromhex(stride))[0]
    if parsedFloat > 1:
        print(stride + ' -> ' + f'{parsedFloat:9.4f}')
